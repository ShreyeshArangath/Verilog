$date
	Fri Apr 10 17:57:03 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module mux32to1_tb $end
$var wire 1 ! Y $end
$var reg 32 " I [31:0] $end
$var reg 5 # S [4:0] $end
$var integer 32 $ s [31:0] $end
$scope module UUT $end
$var wire 32 % I [31:0] $end
$var wire 5 & S [4:0] $end
$var wire 1 ! Y $end
$var wire 32 ' W [31:0] $end
$var wire 32 ( E [31:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$scope begin genblk1[8] $end
$upscope $end
$scope begin genblk1[9] $end
$upscope $end
$scope begin genblk1[10] $end
$upscope $end
$scope begin genblk1[11] $end
$upscope $end
$scope begin genblk1[12] $end
$upscope $end
$scope begin genblk1[13] $end
$upscope $end
$scope begin genblk1[14] $end
$upscope $end
$scope begin genblk1[15] $end
$upscope $end
$scope begin genblk1[16] $end
$upscope $end
$scope begin genblk1[17] $end
$upscope $end
$scope begin genblk1[18] $end
$upscope $end
$scope begin genblk1[19] $end
$upscope $end
$scope begin genblk1[20] $end
$upscope $end
$scope begin genblk1[21] $end
$upscope $end
$scope begin genblk1[22] $end
$upscope $end
$scope begin genblk1[23] $end
$upscope $end
$scope begin genblk1[24] $end
$upscope $end
$scope begin genblk1[25] $end
$upscope $end
$scope begin genblk1[26] $end
$upscope $end
$scope begin genblk1[27] $end
$upscope $end
$scope begin genblk1[28] $end
$upscope $end
$scope begin genblk1[29] $end
$upscope $end
$scope begin genblk1[30] $end
$upscope $end
$scope begin genblk1[31] $end
$upscope $end
$scope module U0 $end
$var wire 5 ) A [4:0] $end
$var wire 12 * W [11:0] $end
$var wire 32 + D [31:0] $end
$scope module U0 $end
$var wire 3 , A [2:0] $end
$var wire 6 - W [5:0] $end
$var wire 8 . D [7:0] $end
$scope module U0 $end
$var wire 2 / A [1:0] $end
$var wire 4 0 W [3:0] $end
$var wire 4 1 D [3:0] $end
$scope module U0 $end
$var wire 1 2 A $end
$var wire 2 3 D [1:0] $end
$upscope $end
$scope module U1 $end
$var wire 1 4 A $end
$var wire 2 5 D [1:0] $end
$upscope $end
$upscope $end
$scope module U1 $end
$var wire 1 6 A $end
$var wire 2 7 D [1:0] $end
$upscope $end
$upscope $end
$scope module U1 $end
$var wire 2 8 A [1:0] $end
$var wire 4 9 W [3:0] $end
$var wire 4 : D [3:0] $end
$scope module U0 $end
$var wire 1 ; A $end
$var wire 2 < D [1:0] $end
$upscope $end
$scope module U1 $end
$var wire 1 = A $end
$var wire 2 > D [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx >
x=
bx <
x;
bx :
bx 9
bx 8
bx 7
x6
bx 5
x4
bx 3
x2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
b0x0x0000000 (
bx '
bx &
b1010000000 %
bx $
bx #
b1010000000 "
x!
$end
#20
0!
b0 (
b10000000000000000000000000000000 '
b10000000000000000000000000000000 +
b1000 1
b10000000 .
b100000001000 *
b1000 :
b1 3
02
b101 0
b1 5
04
b0 /
b100001 -
b1 7
06
b1 <
0;
b101 9
b1 >
0=
b0 ,
b0 8
b0 #
b0 &
b0 )
b0 $
#40
b1000000000000000000000000000000 '
b1000000000000000000000000000000 +
b10000001000 *
b1000000 .
b10001 -
b100 1
b1001 0
b10 3
12
b1 /
b1 ,
b1 #
b1 &
b1 )
b1 $
#60
b100000000000000000000000000000 '
b100000000000000000000000000000 +
b1000001000 *
b100000 .
b1001 -
b10 1
b1 3
02
b110 0
b10 5
14
b10 /
b10 ,
b10 #
b10 &
b10 )
b10 $
#80
b10000000000000000000000000000 '
b10000000000000000000000000000 +
b100001000 *
b10000 .
b101 -
b1 1
b1010 0
b10 3
12
b11 /
b11 ,
b11 #
b11 &
b11 )
b11 $
#100
b1000000000000000000000000000 '
b1000000000000000000000000000 +
b1000 1
b10001000 *
b1000 .
b1 3
02
b101 0
b1 5
04
b0 /
b100010 -
b10 7
16
b100 ,
b100 #
b100 &
b100 )
b100 $
#120
b100000000000000000000000000 '
b100000000000000000000000000 +
b1001000 *
b100 .
b10010 -
b100 1
b1001 0
b10 3
12
b1 /
b101 ,
b101 #
b101 &
b101 )
b101 $
#140
b10000000000000000000000000 '
b10000000000000000000000000 +
b101000 *
b10 .
b1010 -
b10 1
b1 3
02
b110 0
b10 5
14
b10 /
b110 ,
b110 #
b110 &
b110 )
b110 $
#160
b1000000000000000000000000 '
b1000000000000000000000000 +
b11000 *
b1 .
b110 -
b1 1
b1010 0
b10 3
12
b11 /
b111 ,
b111 #
b111 &
b111 )
b111 $
#180
b100000000000000000000000 '
b100000000000000000000000 +
b1000 1
b10000000 .
b100000000100 *
b100 :
b1 3
02
b101 0
b1 5
04
b0 /
b100001 -
b1 7
06
b1001 9
b10 <
1;
b0 ,
b1 8
b1000 #
b1000 &
b1000 )
b1000 $
#200
b10000000000000000000000 '
b10000000000000000000000 +
b10000000100 *
b1000000 .
b10001 -
b100 1
b1001 0
b10 3
12
b1 /
b1 ,
b1001 #
b1001 &
b1001 )
b1001 $
#220
b1000000000000000000000 '
b1000000000000000000000 +
b1000000100 *
b100000 .
b1001 -
b10 1
b1 3
02
b110 0
b10 5
14
b10 /
b10 ,
b1010 #
b1010 &
b1010 )
b1010 $
#240
b100000000000000000000 '
b100000000000000000000 +
b100000100 *
b10000 .
b101 -
b1 1
b1010 0
b10 3
12
b11 /
b11 ,
b1011 #
b1011 &
b1011 )
b1011 $
#260
b10000000000000000000 '
b10000000000000000000 +
b1000 1
b10000100 *
b1000 .
b1 3
02
b101 0
b1 5
04
b0 /
b100010 -
b10 7
16
b100 ,
b1100 #
b1100 &
b1100 )
b1100 $
#280
b1000000000000000000 '
b1000000000000000000 +
b1000100 *
b100 .
b10010 -
b100 1
b1001 0
b10 3
12
b1 /
b101 ,
b1101 #
b1101 &
b1101 )
b1101 $
#300
b100000000000000000 '
b100000000000000000 +
b100100 *
b10 .
b1010 -
b10 1
b1 3
02
b110 0
b10 5
14
b10 /
b110 ,
b1110 #
b1110 &
b1110 )
b1110 $
#320
b10000000000000000 '
b10000000000000000 +
b10100 *
b1 .
b110 -
b1 1
b1010 0
b10 3
12
b11 /
b111 ,
b1111 #
b1111 &
b1111 )
b1111 $
#340
b1000000000000000 '
b1000000000000000 +
b1000 1
b10000000 .
b100000000010 *
b10 :
b1 3
02
b101 0
b1 5
04
b0 /
b100001 -
b1 7
06
b1 <
0;
b110 9
b10 >
1=
b0 ,
b10 8
b10000 #
b10000 &
b10000 )
b10000 $
#360
b100000000000000 '
b100000000000000 +
b10000000010 *
b1000000 .
b10001 -
b100 1
b1001 0
b10 3
12
b1 /
b1 ,
b10001 #
b10001 &
b10001 )
b10001 $
#380
b10000000000000 '
b10000000000000 +
b1000000010 *
b100000 .
b1001 -
b10 1
b1 3
02
b110 0
b10 5
14
b10 /
b10 ,
b10010 #
b10010 &
b10010 )
b10010 $
#400
b1000000000000 '
b1000000000000 +
b100000010 *
b10000 .
b101 -
b1 1
b1010 0
b10 3
12
b11 /
b11 ,
b10011 #
b10011 &
b10011 )
b10011 $
#420
b100000000000 '
b100000000000 +
b1000 1
b10000010 *
b1000 .
b1 3
02
b101 0
b1 5
04
b0 /
b100010 -
b10 7
16
b100 ,
b10100 #
b10100 &
b10100 )
b10100 $
#440
b10000000000 '
b10000000000 +
b1000010 *
b100 .
b10010 -
b100 1
b1001 0
b10 3
12
b1 /
b101 ,
b10101 #
b10101 &
b10101 )
b10101 $
#460
1!
b1000000000 (
b1000000000 '
b1000000000 +
b100010 *
b10 .
b1010 -
b10 1
b1 3
02
b110 0
b10 5
14
b10 /
b110 ,
b10110 #
b10110 &
b10110 )
b10110 $
#480
0!
b0 (
b100000000 '
b100000000 +
b10010 *
b1 .
b110 -
b1 1
b1010 0
b10 3
12
b11 /
b111 ,
b10111 #
b10111 &
b10111 )
b10111 $
#500
1!
b10000000 (
b10000000 '
b10000000 +
b1000 1
b10000000 .
b100000000001 *
b1 :
b1 3
02
b101 0
b1 5
04
b0 /
b100001 -
b1 7
06
b1010 9
b10 <
1;
b0 ,
b11 8
b11000 #
b11000 &
b11000 )
b11000 $
#520
0!
b0 (
b1000000 '
b1000000 +
b10000000001 *
b1000000 .
b10001 -
b100 1
b1001 0
b10 3
12
b1 /
b1 ,
b11001 #
b11001 &
b11001 )
b11001 $
#540
b100000 '
b100000 +
b1000000001 *
b100000 .
b1001 -
b10 1
b1 3
02
b110 0
b10 5
14
b10 /
b10 ,
b11010 #
b11010 &
b11010 )
b11010 $
#560
b10000 '
b10000 +
b100000001 *
b10000 .
b101 -
b1 1
b1010 0
b10 3
12
b11 /
b11 ,
b11011 #
b11011 &
b11011 )
b11011 $
#580
b1000 '
b1000 +
b1000 1
b10000001 *
b1000 .
b1 3
02
b101 0
b1 5
04
b0 /
b100010 -
b10 7
16
b100 ,
b11100 #
b11100 &
b11100 )
b11100 $
#600
b100 '
b100 +
b1000001 *
b100 .
b10010 -
b100 1
b1001 0
b10 3
12
b1 /
b101 ,
b11101 #
b11101 &
b11101 )
b11101 $
#620
b10 '
b10 +
b100001 *
b10 .
b1010 -
b10 1
b1 3
02
b110 0
b10 5
14
b10 /
b110 ,
b11110 #
b11110 &
b11110 )
b11110 $
#640
b1 '
b1 +
b10001 *
b1 .
b110 -
b1 1
b1010 0
b10 3
12
b11 /
b111 ,
b11111 #
b11111 &
b11111 )
b11111 $
#660
b100000 $
