$date
	Fri Apr 10 00:48:21 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module mux32to1_tb $end
$var wire 1 ! Y $end
$var reg 32 " I [31:0] $end
$var reg 5 # S [4:0] $end
$scope module UUT $end
$var wire 32 $ I [31:0] $end
$var wire 5 % S [4:0] $end
$var wire 1 ! Y $end
$var wire 32 & W [31:0] $end
$var wire 32 ' E [31:0] $end
$scope module U0 $end
$var wire 5 ( A [4:0] $end
$var wire 12 ) W [11:0] $end
$var wire 32 * D [31:0] $end
$scope module U0 $end
$var wire 3 + A [2:0] $end
$var wire 6 , W [5:0] $end
$var wire 8 - D [7:0] $end
$scope module U0 $end
$var wire 2 . A [1:0] $end
$var wire 4 / W [3:0] $end
$var wire 4 0 D [3:0] $end
$scope module U0 $end
$var wire 1 1 A $end
$var wire 2 2 D [1:0] $end
$upscope $end
$scope module U1 $end
$var wire 1 3 A $end
$var wire 2 4 D [1:0] $end
$upscope $end
$upscope $end
$scope module U1 $end
$var wire 1 5 A $end
$var wire 2 6 D [1:0] $end
$upscope $end
$upscope $end
$scope module U1 $end
$var wire 2 7 A [1:0] $end
$var wire 4 8 W [3:0] $end
$var wire 4 9 D [3:0] $end
$scope module U0 $end
$var wire 1 : A $end
$var wire 2 ; D [1:0] $end
$upscope $end
$scope module U1 $end
$var wire 1 < A $end
$var wire 2 = D [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 =
0<
b1 ;
0:
b1000 9
b101 8
b0 7
b1 6
05
b1 4
03
b1 2
01
b1000 0
b101 /
b0 .
b10000000 -
b100001 ,
b0 +
b10000000000000000000000000000000 *
b100000001000 )
b0 (
b0 '
b10000000000000000000000000000000 &
b0 %
b0 $
b0 #
b0 "
0!
$end
#20
b1000000000000000000000000000000 &
b1000000000000000000000000000000 *
b10000001000 )
b1000000 -
b10001 ,
b100 0
b1001 /
b10 2
11
b1 .
b1 +
b1 "
b1 $
b1 #
b1 %
b1 (
#40
b100000000000000000000000000000 &
b100000000000000000000000000000 *
b1000001000 )
b100000 -
b1001 ,
b10 0
b1 2
01
b110 /
b10 4
13
b10 .
b10 +
b10 "
b10 $
b10 #
b10 %
b10 (
#60
b10000000000000000000000000000 &
b10000000000000000000000000000 *
b100001000 )
b10000 -
b101 ,
b1 0
b1010 /
b10 2
11
b11 .
b11 +
b11 "
b11 $
b11 #
b11 %
b11 (
#80
b1000000000000000000000000000 &
b1000000000000000000000000000 *
b1000 0
b10001000 )
b1000 -
b1 2
01
b101 /
b1 4
03
b0 .
b100010 ,
b10 6
15
b100 +
b100 "
b100 $
b100 #
b100 %
b100 (
#100
b100000000000000000000000000 &
b100000000000000000000000000 *
b1001000 )
b100 -
b10010 ,
b100 0
b1001 /
b10 2
11
b1 .
b101 +
b101 "
b101 $
b101 #
b101 %
b101 (
#120
b10000000000000000000000000 &
b10000000000000000000000000 *
b101000 )
b10 -
b1010 ,
b10 0
b1 2
01
b110 /
b10 4
13
b10 .
b110 +
b110 "
b110 $
b110 #
b110 %
b110 (
#140
b1000000000000000000000000 &
b1000000000000000000000000 *
b11000 )
b1 -
b110 ,
b1 0
b1010 /
b10 2
11
b11 .
b111 +
b111 "
b111 $
b111 #
b111 %
b111 (
#160
b100000000000000000000000 &
b100000000000000000000000 *
b1000 0
b10000000 -
b100000000100 )
b100 9
b1 2
01
b101 /
b1 4
03
b0 .
b100001 ,
b1 6
05
b1001 8
b10 ;
1:
b0 +
b1 7
b1000 "
b1000 $
b1000 #
b1000 %
b1000 (
#180
